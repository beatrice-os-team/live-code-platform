# 中断处理演示1：长时间计算任务 + 实时中断
# 本演示展示真实的长时间程序如何被中断

# 设置程序运行参数
steps = 120

print("=== 长时间计算任务中断演示 ===")
print(f"模拟CPU密集型任务，运行 {steps} 步")
print("可以在运行过程中触发各种中断来观察效果")
print()

print("🎯 这是一个真实的长时间运行程序：")
print("   - 每步都在进行实际的计算工作")
print("   - 程序会定期检查中断信号")
print("   - 中断会立即影响程序执行")
print("   - 所有操作都记录到文件系统")
print()

print("⚡ 可测试的中断类型：")
print("   1. SIGINT (Ctrl+C) - 立即终止程序")
print("   2. SIGTERM - 优雅关闭程序")
print("   3. SIGUSR1 - 用户信号1 (继续运行)")
print("   4. SIGUSR2 - 调试模式信号 (继续运行)")
print("   5. TIMER - 定时器中断 (继续运行)")
print("   6. I/O - 文件系统中断 (继续运行)")
print("   7. MEMORY - 内存管理中断 (继续运行)")
print("   8. SYSCALL - 系统调用中断 (继续运行)")
print()

print("📁 文件系统特性：")
print("   - 中断日志自动保存到 /interrupt/logs/")
print("   - 支持日志文件的读取和管理")
print("   - 基于Emscripten虚拟文件系统")
print()

print("🚀 操作步骤：")
print("   1. 点击'运行演示'启动长程序")
print("   2. 程序开始运行后，点击中断按钮")
print("   3. 观察中断如何影响程序执行")
print("   4. 尝试'文件系统演示'查看日志")
print("   5. 使用'读取日志'查看中断记录")
print()

# 模拟复杂的数据结构处理
class DataProcessor:
    def __init__(self):
        self.data_matrix = []
        self.processed_count = 0
        
    def init_data(self, size):
        print(f"📊 初始化 {size}x{size} 数据矩阵...")
        self.data_matrix = [[i*j for j in 1, size] for i in 1, size]
        
    def process_data(self):
        # 模拟复杂计算
        for row in self.data_matrix:
            for i in 1, len(row):
                row[i] = (row[i] * 1.414) % 1000
        self.processed_count += 1

print("💻 数据处理器已就绪")
print("🔄 等待启动信号...")
print()
print("💡 提示：点击右侧'启动程序'按钮开始演示")
print("⚡ 程序运行时可随时点击中断按钮进行测试！")
print()
print("注意：这是真实的程序执行，不是模拟！")